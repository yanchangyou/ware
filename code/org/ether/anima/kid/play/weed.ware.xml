<?xml version="1.0" encoding="UTF-8"?>


<mold name="Disk" extends="Ware">
	
</mold>

<ware>
	<action>
		<speak></speak>
	</action>
	<flow>
	</flow>
	<task>
	</task>
	<service>
	</service>
	<server>
	</server>
</ware>

<ware version="0.0.1" domain="" port="" id="" name="">
	<src>
	</src>
	<flow>
	</flow>
	<service name="read" param="path+(/.+[a-b]/),path*(),path?,path{n,m}">
		
	</service>
	<service name="read" param="int:name,char:">
		
	</service>
</ware>

<ware version="0.0.1" domain="" port="" id="" name="">
	<src>
	</src>
	<flow>
	</flow>
	<service name="read" param="path+(/.+[a-b]/),path*(),path?,path{n,m}">
		
	</service>
	<service name="read" param="int:name,char:">
		
	</service>
</ware>

<space address="china:sichuang:ziyang"/>

	<ware name="HelloWorld" port="11001">
		
		<service name="main">
			<speack>Hello world!</speack>
		</service>
	
	</ware>
	
</space>



访问格式 

	domain:port:serviceName?param1=1&param2=2&param3=3

jdbc:oracle:thin:@127.0.0.1:1521:orcl

<ware>
	<idea id="1">
		<原则1>一个ware一个端口</原则1>
		<原则2>一个ware一个xml</原则2>
		<原则3>一个ware一个jar</原则3>
	</idea>
	<idea id="2">
		源代码 : xxx.ware.xml
		编译成: xxx.version.port.ware.jar
		一个service 对应一个对象, 对象的类名就是 name属性对应的值
	</idea>
	<idea id="3">
		基于事件机制的插件体系, 数据插入, 功能插入, 逻辑插入, 流程插入, 界面插入
		采用 css 设计风格
	</idea>
	<idea id="4">
		everything on ip and everything in ware.
	</idea>
	<idea id="5" name="时空">
		ware in space;
		like package 
		space1#space#space3#Ware.....
		把ware放到不同的space里面, 
		这里是否需要把time也纳入进来, 这样 time & space 都纳入其中, 构成宇宙的基本要素
	</idea>
	<idea id="6" name="耗散结构">
		模拟一个生态系统, 内部是竞争的, 外部是开放的
		对于CPU, 内存的使用时按比例的, 对于端口的开发的
		CPU,内存相当于能量
		有生命的
		一个耗散结构, 构建是有生命值, 耗散完自动消失.
		随时间耗散的结构, 时间到就销毁,
		每与外界交换一次就增加一份能量 
		定一个 初始化时定义一个能量, 根据能量来分配CPU, 内存, 等软硬件资源, 能量高的先分配到
	</idea>
	<idea id="7">
		经过书写 发现 # 作为空间分隔符视觉效果不好, 不清晰很容易和其它混在一起, 分隔符一个简单清晰 为此
		选择 [:] 作为分隔符, 现在才知道为什么前辈们选择分隔符  / \ . : 等简单的
	</idea>
	<idea id="8" name="关键字">
		ware, space, time, energe, matter, info, human, service, server, ??
		action, task, node, cell, follow, system, god, 
		action : listen, speak, read, write, 
		listen, speak : 信息流(可理解)
		read, write : 数据流
		[听说读写] 模型代替 [请求响应]模型
	</idea>
	<idea id="10" name="人机分工协作">
		模仿人脑中潜意识和显意识分工与协作的原理
		真个ware体系也按照此来设计, 人脑充当显意识, 只有当潜意识不能解决时, 显意识才参与其中, 
		机器充当潜意识
		最终实现一个远大的理想  : GHCC = Global Human Computer Cooperate = 全球人机协作
	</idea>
	<idea id="12">
		博采众长, 厚积薄发, 吸收,全天候的吸收
	</idea>
	<idea id="13" name="证书">
		每个ware有个证书, 证明是唯一的
	</idea>
	<idea id="14" name="引入">
		把科学, 哲学, 数学, 史学, 美学融入到ware当中
		<数学>
			把数学的 加减乘除加入
			把ware当成一个数, 然后加上基于数的操作
		</数学>
	</idea>
	<idea id="15" name="持续发展">
		目标分解, 目标组合, 持续的发展
		<_1>
			新思想的获取->鉴别->吸收
			新思想的纳入
		</_1>
		<_2>
			已有内容的巩固完善
		</_2>
	</idea>
	<idae id="16" name="打通任督二脉">
		能够迅速的吸收转换,
		一种及其灵活的结构
	</idae>
	<idea id="17" name="road-map" time="20100616.221021">
		<step no="1">welcome host</step>
		<step no="2">echo</step>
		<step no="3">a + b</step>
		<step no="4">express</step>
		<step no="5">student score manage</step>
		<step no="6">web server</step>
		<step no="7">db server</step>
		<step no="8">os</step>
		<step no="9">ghcc</step>
	</idea>
	<idea id="18" name="linux哲学">
		组合简单的功能完成复杂的任务
	</idea>
	<idea id="19" name="云计算">
		ware进化:一个ware复制出多个ware,然后原来的做管理
		
	</idea>
</ware>


<java>
	public class Test {
		public int a;
		public String b;
		
		public int getA() {
			return a;
		}
		
		public int add() {
			return Integer.parsing(a+b);
		}
	}
</java>